{"version":3,"sources":["components/Chat/MessageBox/MessageBox.js","components/Chat/Messages/Messages.js","components/Chat/useChat.js","components/Chat/Chat.js","components/Login/LoginForm/LoginForm.js","App.js","index.js"],"names":["MessageBox","props","useState","message","setMessage","messageRef","useRef","sendMessageClick","current","value","messageObject","user_name","userData","currentUserData","user_avatar","onSendMessage","className","autoComplete","TextField","id","label","margin","multiline","fullWidth","rows","inputRef","onChange","event","target","onKeyDown","key","preventDefault","Button","variant","color","onClick","Messages","messages","List","flatMap","index","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Typography","component","message_text","Divider","useChat","socketRef","setMessages","useEffect","socketIOClient","on","mostRecentMessages","disconnect","sendMessage","emit","Chat","LoginForm","setUserDataForChat","loading","setLoading","userNameInput","imageInput","sendData","options","a","axios","post","setUserName","userName","imageFile","undefined","data","FormData","append","then","response","user_avatar_url","catch","error","alert","finally","e","type","height","width","files","style","display","name","ref","accept","Fab","size","aria-label","App","setUserData","render","document","querySelector"],"mappings":"6MAqDeA,EAhDI,SAACC,GAAW,IAAD,EACEC,mBAAS,IADX,mBACrBC,EADqB,KACZC,EADY,KAEtBC,EAAaC,iBAAO,IAEpBC,EAAmB,WACvB,GAAgC,KAA7BF,EAAWG,QAAQC,MACpB,OAAO,EAET,IAAMC,EAAgB,CACpBC,UAAWV,EAAMW,SAASC,gBAAgBF,UAC1CG,YAAab,EAAMW,SAASC,gBAAgBC,YAC5CX,QAASE,EAAWG,QAAQC,OAE9BR,EAAMc,cAAcL,GACpBN,EAAW,KAGb,OACE,uBAAMY,UAAU,YAAYC,aAAa,MAAzC,UACE,cAACC,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,0BACNC,OAAO,SACPC,WAAS,EACTC,WAAS,EACTC,KAAK,IACLC,SAAUpB,EACVqB,SAAU,SAAAC,GAAK,OAAIvB,EAAWuB,EAAMC,OAAOnB,QAC3CoB,UAAW,SAAAF,GACQ,UAAdA,EAAMG,MAEPH,EAAMI,iBACNxB,MAGJE,MAAON,IAET,cAAC6B,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAAS5B,EAHX,sB,8DCJS6B,EA5BE,SAAC,GAAe,IAAdC,EAAa,EAAbA,SACjB,OACE,cAACC,EAAA,EAAD,UACGD,EAASE,SAAQ,SAAC7B,EAAe8B,GAAhB,MAA0B,CAC1C,eAACC,EAAA,EAAD,CAAUC,WAAW,aAArB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,IAAI,kBAAkBC,IAAKpC,EAAcI,gBAEnD,cAACiC,EAAA,EAAD,CACEC,QAAStC,EAAcC,UACvBsC,UACE,cAAC,WAAD,UACE,cAACC,EAAA,EAAD,CACEC,UAAU,OACVlB,QAAQ,QACRC,MAAM,cAHR,SAKGxB,EAAc0C,qBAbcZ,GAmBrC,cAACa,EAAA,EAAD,CAASpB,QAAQ,QAAQkB,UAAU,MAAU,WAAWX,U,yBCiBnDc,EA/CC,WACd,IAAMC,EAAYjD,mBADE,EAEYJ,mBAAS,IAFrB,mBAEbmC,EAFa,KAEHmB,EAFG,KAKpBC,qBAAU,WA6BR,OA5BAF,EAAU/C,QAAUkD,IAAe,yBAEnCH,EAAU/C,QAAQmD,GAAG,sBAAsB,SAACC,GAK1CJ,GAAY,SAAAnB,GAAQ,mBAAQuB,SAG9BL,EAAU/C,QAAQmD,GAAG,kBAAiB,YAA4C,IAA1ChD,EAAyC,EAAzCA,UAAWG,EAA8B,EAA9BA,YAAasC,EAAiB,EAAjBA,aAE9DI,GAAY,SAAAnB,GAAQ,4BAAQA,GAAR,CAAkB,CAAC1B,UAAWA,EAAWG,YAAaA,EAAasC,aAAcA,WAgBhG,WACLG,EAAU/C,QAAQqD,gBAEpB,IAOF,MAAO,CAACxB,WAAUyB,YAJE,SAACpD,GACnB6C,EAAU/C,QAAQuD,KAAK,iBAAkBrD,MCpB9BsD,EAnBF,SAACnD,GAAoB,MAGAyC,IAAzBjB,EAHyB,EAGzBA,SAAUyB,EAHe,EAGfA,YACjB,OACE,gCACE,cAAC,EAAD,CACEzB,SAAUA,IAEZ,cAAC,EAAD,CACEzB,SAAUC,EACVE,cAAe,SAAAZ,GACb2D,EAAY3D,U,qFCgFP8D,EA3FG,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,mBAAwB,EACZhE,oBAAS,GADG,mBACnCiE,EADmC,KAC1BC,EAD0B,KAEpCC,EAAgB/D,iBAAO,IACvBgE,EAAahE,iBAAO,IAMpBiE,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACFC,IAAMC,KAAK,mCAAmCH,GAD5C,mFAAH,sDAIRI,EAAc,SAACC,EAAUC,GAC7B,GAAgB,KAAbD,EACD,OAAO,EAET,QAAiBE,IAAdD,EACDZ,EAAmB,CACjBvD,UAAWkE,QAEV,CACHT,GAAW,GACX,IAAMY,EAAO,IAAIC,SACjBD,EAAKE,OAAO,SAASJ,GACrB,IACEP,EAASS,GACNG,MAAK,SAAAC,GACJlB,EAAmB,CACjBvD,UAAWkE,EACX/D,YAAasE,EAASJ,KAAKK,qBAG9BC,OAAO,SAAAC,GACNC,MAAMD,MAEPE,SAAQ,kBAAMrB,GAAW,MAC7B,MAAOsB,OAMZ,OAAOvB,EAAW,cAAC,IAAD,CAAQwB,KAAK,YAAYzD,MAAM,UAAU0D,OAAQ,IAAKC,MAAO,MAC7E,uBAAM7E,UAAU,aAAaC,aAAa,MAA1C,UACE,cAACC,EAAA,EAAD,CACEC,GAAG,gBACHC,MAAM,iBACNC,OAAO,SACPE,WAAS,EACTC,KAAK,IACLC,SAAU4C,EACVxC,UAAW,SAAAF,GACQ,UAAdA,EAAMG,MACPH,EAAMI,iBACN6C,EAAYjD,EAAMC,OAAOnB,MAAO6D,EAAW9D,QAAQsF,MAAM,QAI/D,kCACE,uBACEC,MAAO,CAACC,QAAQ,QAChB7E,GAAG,gBACH8E,KAAK,gBACLC,IAAK5B,EACLqB,KAAK,OACLQ,OAAO,qCAET,eAACC,EAAA,EAAD,CACElE,MAAM,YACNmE,KAAK,QACLlD,UAAU,OACVmD,aAAW,MACXrE,QAAQ,WALV,UAOE,cAAC,IAAD,IAPF,oBASA,uBACA,0BAEF,cAACD,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QA9EiB,WACrByC,EAAYP,EAAc7D,QAAQC,MAAO6D,EAAW9D,QAAQsF,MAAM,KA0EhE,4BClESS,G,OAdH,WAAO,IAAD,EACerG,mBAAS,MADxB,mBACVU,EADU,KACA4F,EADA,KAGjB,OAAiB,OAAb5F,EAEF,sBAAKI,UAAU,YAAf,UACC,qBAAKA,UAAU,kBAAf,qCACA,cAAC,EAAD,CAAWkD,mBAAoBsC,OAI3B,cAAC,EAAD,CAAM3F,gBAAiBD,M,MCZ/B6F,iBAAO,cAAC,EAAD,IAASC,SAASC,cAAc,W","file":"static/js/main.e3391fd7.chunk.js","sourcesContent":["import React,{useState, useRef} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n//renaming prop for use in the component\r\nconst MessageBox = (props) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const messageRef = useRef(\"\");\r\n\r\n  const sendMessageClick = () =>{\r\n    if(messageRef.current.value === \"\"){\r\n      return false;\r\n    }\r\n    const messageObject = {\r\n      user_name: props.userData.currentUserData.user_name,\r\n      user_avatar: props.userData.currentUserData.user_avatar,\r\n      message: messageRef.current.value\r\n    }\r\n    props.onSendMessage(messageObject);\r\n    setMessage(\"\");\r\n  }\r\n\r\n  return (\r\n    <form className=\"chat-form\" autoComplete=\"off\">\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        label=\"Write your message here\"\r\n        margin=\"normal\"\r\n        multiline\r\n        fullWidth\r\n        rows=\"4\"\r\n        inputRef={messageRef}\r\n        onChange={event => setMessage(event.target.value)}\r\n        onKeyDown={event => {\r\n          if(event.key === \"Enter\"){\r\n            //prevents enter from being pressed\r\n            event.preventDefault();\r\n            sendMessageClick();\r\n          }\r\n        }}\r\n        value={message}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={sendMessageClick}\r\n      >\r\n        Send\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageBox;","import React, { Fragment } from \"react\";\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nconst Messages = ({messages}) =>{\r\n  return (\r\n    <List>\r\n      {messages.flatMap((messageObject, index) => [(\r\n        <ListItem alignItems=\"flex-start\" key={index}>\r\n          <ListItemAvatar>\r\n            <Avatar alt=\"Avatar alt text\" src={messageObject.user_avatar} />\r\n          </ListItemAvatar>\r\n          <ListItemText\r\n            primary={messageObject.user_name}\r\n            secondary={\r\n              <Fragment>\r\n                <Typography\r\n                  component=\"span\"\r\n                  variant=\"body2\"\r\n                  color=\"textPrimary\"\r\n                >\r\n                  {messageObject.message_text}\r\n                </Typography>\r\n              </Fragment>\r\n            }\r\n          />\r\n        </ListItem>\r\n        ),<Divider variant=\"inset\" component=\"li\" key={\"divider-\"+index} />])}\r\n    </List>\r\n  )\r\n};\r\n\r\nexport default Messages;","import {useEffect, useState, useRef} from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst useChat = () => {\r\n  const socketRef = useRef();\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  //when component mounts and changes\r\n  useEffect(() =>{\r\n    socketRef.current = socketIOClient(\"http://localhost:5001\");\r\n\r\n    socketRef.current.on(\"mostRecentMessages\", (mostRecentMessages) =>{\r\n      //on start, set as messages the mostRecentMessages\r\n      //in case the server restarts, we want to replace the current messages\r\n      //with those from database\r\n      //not add more\r\n      setMessages(messages => [...mostRecentMessages]);\r\n    });\r\n\r\n    socketRef.current.on(\"newChatMessage\",({user_name, user_avatar, message_text}) =>{\r\n      //append message to the end of array, after using spread operator\r\n      setMessages(messages => [...messages, {user_name: user_name, user_avatar: user_avatar, message_text: message_text}]);\r\n\r\n      //this will not work\r\n      //useeffect runs once, when the component first loads\r\n      //acts as closure that has access to messages (parent scope)\r\n      //when it first runs, messages is empty array\r\n      //when you add new messages to the messages array, it is no longer empty\r\n      //and the array is changed (not mutated, new array)\r\n      //with this way you're no longer able to access the current value of messages here\r\n      //you would have access only to the first value of messages (empty array)\r\n      //and means you won't be able to append more messages\r\n      //so instead we use the above, that's we use a callback that will get the latest value of messages\r\n      //and then appends the latest data\r\n      //setMessages([...messages, message])\r\n    })\r\n\r\n    return ()=>{\r\n      socketRef.current.disconnect();\r\n    }\r\n  },[]);\r\n\r\n  //message is part of an object\r\n  const sendMessage = (messageObject) =>{\r\n    socketRef.current.emit(\"newChatMessage\", messageObject)\r\n  }\r\n\r\n  return {messages, sendMessage};\r\n}\r\n\r\nexport default useChat;","import React from \"react\";\r\nimport MessageBox from \"./MessageBox/MessageBox\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport useChat from \"./useChat\";\r\n\r\nconst Chat = (currentUserData) => {\r\n  //useChat calls to our custom hook\r\n  //it returns an object with messages and sending a message\r\n  const {messages, sendMessage} = useChat();\r\n  return (\r\n    <div>\r\n      <Messages\r\n        messages={messages}\r\n      />\r\n      <MessageBox\r\n        userData={currentUserData}\r\n        onSendMessage={message => {\r\n          sendMessage(message);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;","import React, {useRef, useState} from \"react\";\r\nimport {TextField, Fab, Button} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport axios from \"axios\";\r\n\r\nconst LoginForm = ({setUserDataForChat}) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const userNameInput = useRef(\"\");\r\n  const imageInput = useRef(\"\");\r\n\r\n  const enterChatClick = () =>{\r\n    setUserName(userNameInput.current.value, imageInput.current.files[0]);\r\n  }\r\n\r\n  const sendData = async (options) => {\r\n    return await axios.post('http://localhost:5002/api/upload',options);\r\n  }\r\n\r\n  const setUserName = (userName, imageFile) =>{\r\n    if(userName === \"\"){\r\n      return false;\r\n    }\r\n    if(imageFile === undefined){\r\n      setUserDataForChat({\r\n        user_name: userName,\r\n      });\r\n    }else{\r\n      setLoading(true);\r\n      const data = new FormData();\r\n      data.append('avatar',imageFile);\r\n      try{\r\n        sendData(data)\r\n          .then(response => {\r\n            setUserDataForChat({\r\n              user_name: userName,\r\n              user_avatar: response.data.user_avatar_url\r\n            });\r\n          })\r\n          .catch( error => {\r\n            alert(error);\r\n          })\r\n          .finally(() => setLoading(false))\r\n      }catch (e) {\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  return loading ? (<Loader type=\"ThreeDots\" color=\"#2BAD60\" height={100} width={100} />) : (\r\n    <form className=\"login-form\" autoComplete=\"off\">\r\n      <TextField\r\n        id=\"chat-username\"\r\n        label=\"Enter Username\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        rows=\"1\"\r\n        inputRef={userNameInput}\r\n        onKeyDown={event => {\r\n          if(event.key === \"Enter\"){\r\n            event.preventDefault();\r\n            setUserName(event.target.value, imageInput.current.files[0]);\r\n          }\r\n        }}\r\n      />\r\n      <label>\r\n        <input\r\n          style={{display:\"none\"}}\r\n          id=\"upload-avatar\"\r\n          name=\"upload-avatar\"\r\n          ref={imageInput}\r\n          type=\"file\"\r\n          accept=\"image/x-png,image/gif,image/jpeg\"\r\n        />\r\n        <Fab\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          component=\"span\"\r\n          aria-label=\"add\"\r\n          variant=\"extended\"\r\n        >\r\n          <AddIcon /> Upload avatar\r\n        </Fab>\r\n        <br />\r\n        <br />\r\n      </label>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={enterChatClick}\r\n      >\r\n        Enter Chat\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default LoginForm;","import React, { useState } from \"react\";\r\nimport Chat from \"./components/Chat/Chat\";\r\nimport LoginForm from \"./components/Login/LoginForm/LoginForm\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n\tconst [userData, setUserData] = useState(null);\r\n\r\n\tif (userData === null) {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"container-title\">Welcome to our Chat App</div>\r\n\t\t\t\t<LoginForm setUserDataForChat={setUserData} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\treturn <Chat currentUserData={userData} />;\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport {render} from \"react-dom\";\r\nimport App from \"./App\";\r\nimport 'regenerator-runtime/runtime'\r\n\r\nrender(<App />, document.querySelector('#app'));\r\n"],"sourceRoot":""}